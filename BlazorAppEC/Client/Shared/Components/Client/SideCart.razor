@inject ICartService _cartSerice
@inject IToastService _toastService
@inject NavigationManager _navigate
@implements IDisposable

<div class="cart block" data-toggle="@(active ? "active" : "inactive")">
    <div class="label" @onclick="openCart">
        <i class="ion-bag"></i> @_cartSerice.GetTotalItems()
    </div>

    <div class="overlay" @onclick="closeCart"></div>

    <div class="window">
        <div class="title">
            <button type="button" class="close" @onclick="closeCart"><i class="ion-android-close"></i></button>
            <h1 class="h3 info">Shopping cart</h1>
        </div>

        <div class="content">
            @foreach (var item in _cartSerice.Carts)
            {
                <SideCartItem product="item" deleteItem="() => deleteCartItem(item)" increase="() => increaseQty(item)" decrease="() => decreaseQty(item)"/>
            }
        </div>

        <div class="checkout container-fluid">
            <div class="row">
                <div class="col-xs-3 col-sm-2">
                    <div>
                        <p>Subtotal:</p>
                        <h3 class="h4">Total:</h3>
                    </div>
                </div>
                <div class="col-xs-3 col-sm-4">
                    <div class="total">
                        <p>$1 200</p>
                        <h3 class="h4">$1 200</h3>
                    </div>
                </div>

                <div class="col-xs-6 col-sm-6">
                    <NavLink class="btn btn-primary" href="checkout" @onclick="closeCart"> Checkout order </NavLink>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] Task<AuthenticationState> _authState {get; set;}
    private bool active = false;
    public void openCart() {
        active = true;
    }
    public void closeCart() {
        active = false;
    }
    public List<Product> cartItems { get; set; }
    protected override void OnInitialized()
    {
        cartItems = _cartSerice.Carts;
        _cartSerice.OnChange += StateHasChanged;
    }
    public void Dispose() {
        _cartSerice.OnChange -= StateHasChanged;
    }
    protected void deleteCartItem(Product item) {
        _cartSerice.DeleteItem(item);
        StateHasChanged();
    }
    protected void increaseQty(Product item) {
        _cartSerice.IncreaseQuantity(item);
        StateHasChanged();
    }
    protected void decreaseQty(Product item) {
        _cartSerice.DecreaseQuantity(item);
        StateHasChanged();
    }

    protected async Task checkout() {
        var userstate = await _authState;
        var user = userstate.User;
        if(!user.Identity.IsAuthenticated) {
            _toastService.ShowInfo("","Please login");
        } else if(_cartSerice.Carts.Count == 0) {
            _toastService.ShowInfo("","Please order");
        } else {
            _navigate.NavigateTo("/checkout");
        }
    }
}