@inject ICartService _cartService
@inject IToastService _toastService
@inject NavigationManager _navigate
@implements IDisposable

<div class="cart block" data-toggle="@(active ? "active" : "inactive")">
    <div class="label" @onclick="openCart">
        <i class="ion-bag"></i> @_cartService.GetTotalItems()
    </div>

    <div class="overlay" @onclick="closeCart"></div>

    <div class="window">
        <div class="title">
            <button type="button" class="close" @onclick="closeCart"><i class="ion-android-close"></i></button>
            <h1 class="h3 info">Giỏ hàng</h1>
        </div>

        <div class="content">
            @foreach (var item in _cartService.Carts)
            {
                <SideCartItem product="item" deleteItem="() => deleteCartItem(item)" increase="() => increaseQty(item)" decrease="() => decreaseQty(item)" />
            }
        </div>

        <div class="checkout container-fluid">
            <div class="row">
                <div class="col-xs-3 col-sm-2">
                    <h3 class="h5">Tổng tiền:</h3>
                </div>
                <div class="col-xs-3 col-sm-4">
                    <h3 class="h5 no-wrap">
                        @(String.Format("{0:n0}", _cartService.GetPrice())) <sup>vnd</sup>
                    </h3>
                </div>

                <div class="col-xs-6 col-sm-6">
                    <NavLink class="btn btn-primary" href="checkout" @onclick="closeCart"> Thanh toán </NavLink>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] Task<AuthenticationState> _authState { get; set; }
    private bool active = false;
    public void openCart()
    {
        active = true;
    }
    public void closeCart()
    {
        active = false;
    }
    public List<Product> cartItems { get; set; }
    protected override void OnInitialized()
    {
        cartItems = _cartService.Carts;
        _cartService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }
    protected void deleteCartItem(Product item)
    {
        _cartService.DeleteItem(item);
        StateHasChanged();
    }
    protected void increaseQty(Product item)
    {
        _cartService.IncreaseQuantity(item);
        StateHasChanged();
    }
    protected void decreaseQty(Product item)
    {
        _cartService.DecreaseQuantity(item);
        StateHasChanged();
    }

    protected async Task checkout()
    {
        var userstate = await _authState;
        var user = userstate.User;
        if (!user.Identity.IsAuthenticated)
        {
            _toastService.ShowInfo("", "Please login");
        }
        else if (_cartService.Carts.Count == 0)
        {
            _toastService.ShowInfo("", "Please order");
        }
        else
        {
            _navigate.NavigateTo("/checkout");
        }
    }
}