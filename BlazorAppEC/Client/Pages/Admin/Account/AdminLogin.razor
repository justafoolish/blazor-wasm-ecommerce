@page "/admin/login"
@inject IUserLoginVM _userLoginVM
@inject AuthenticationStateProvider authState
@inject NavigationManager _navManage
@inject Blazored.LocalStorage.ILocalStorageService _localStorage


<div class="min-h-screen grid place-items-center">
    <div class="w-96 bg-gray-50 px-7 py-5 border">
        <form @onsubmit="login">
            <h3 class="uppercase text-xl font-medium px-2 text-gray-700 text-center my-3">Login as Admin</h3>
            <div class="relative my-4 form-group">
                <label class="top-1/6 mt-3 left-4 absolute text-gray-500 font-medium pointer-events-none transition-all @(_userLoginVM.User.Email != "" ? "shrink" : "")" fType="lbl">Email</label>
                <input @bind-value="_userLoginVM.User.Email" id="email" name="email" autocomplete="off" type="email" class="form-input px-4 py-3 bg-gray-100 outline-none text-gray-800 w-full transition-all border-b-2 border-gray-300 focus:border-black" fType="inp" readonly onfocus="this.removeAttribute('readonly');" />
                <span class="text-red-500 mt-5 hidden" id="message"></span>
            </div>
            <div class="relative my-4 form-group">
                <label class="top-1/6 mt-3 left-4 absolute text-gray-500 font-medium pointer-events-none transition-all @(_userLoginVM.User.Password != "" ? "shrink" : null)" fType="lbl">Password</label>
                <input @bind-value="_userLoginVM.User.Password" id="password" name="password" autocomplete="off" type="password" class="form-input px-4 py-3 bg-gray-100 outline-none text-gray-800 w-full transition-all border-b-2 border-gray-300 focus:border-black" fType="inp" readonly onfocus="this.removeAttribute('readonly');" />
                <span class="text-red-500 mt-5 hidden" id="message"></span>
            </div>
            <button @onclick="login" class="my-3 bg-gray-400 w-full text-center py-3 text-sm font-medium text-gray-50 hover:bg-gray-500 transition-all" type="submit" disabled=@(isLoading)>
                @if (isLoading)
                {
                    <svg class="animate-spin h-5 w-5 mr-2 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-50" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-100" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                }
                Đăng nhập</button>
        </form>
    </div>
</div>

@code {
    private bool isLoading { get; set; } = false;
    protected async override Task OnInitializedAsync()
    {
        var UserState = await authState.GetAuthenticationStateAsync();
        var user = UserState.User;
        if (user.Identity.IsAuthenticated)
        {
            _navManage.NavigateTo("/admin/dashboard");
        }
    }
    protected async Task login()
    {
        isLoading = true;
        AuthenticationResponse authRes = await _userLoginVM.authenticateJWT();
        if (authRes.Token != string.Empty)
        {
            await _localStorage.SetItemAsync<string>("jwt_token", authRes.Token);
            var userState = await authState.GetAuthenticationStateAsync();
            var user = userState.User;

            //if role == admin => markauthenticated
            if (user.IsInRole("admin"))
            {
                await ((BlazorAppEC.Client.CustomAuthenticationStateProvider)authState).MarkUserAsAuthenticated();
                isLoading = false;
                _navManage.NavigateTo("/admin/dashboard");
            }
            else
            {
                // else markaslogout
                await ((BlazorAppEC.Client.CustomAuthenticationStateProvider)authState).MarkUserAsLoggedOut();
            }
        }
        isLoading = false;
        StateHasChanged();
    }

}